Traceback (most recent call last):
  File "/home/davide/.local/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/davide/.local/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# from ipyleaflet import Map
import ipyleaflet as ll
from ipywidgets import Button, VBox

from IPython.display import FileLink

#> ------------------------------------------------------------------
#> Map
m = ll.Map(center=(45.0, 10.0), zoom=5)  # , basemap=...

#> ------------------------------------------------------------------
#> Layers

#> ------------------------------------------------------------------
#> Controls
#> Scale
m.add(ll.ScaleControl(position='bottomleft'))
#> Full screen
m.add(ll.FullScreenControl())
#> Measure
m.add(ll.MeasureControl(position='bottomleft', active_color='orange', primary_length_unit='kilometers'))
#> Split map, with a slider
#> Draw, GeomanDrawControl
draw_control = ll.GeomDrawControl()
#> Legend
#> Search



# Store drawn data
drawn_features = []

# Capture new feature additions
def handle_draw(action, geo_json):
    if action == 'created':
        drawn_features.append(geo_json)
        print(f"Added new feature: {geo_json['geometry']}")

draw_control.on_draw(handle_draw)
m.add_control(draw_control)

# Add Download Button
download_button = Button(description="Download Features")

def download_geojson(_):
    # Save the drawn features to a GeoJSON file
    geojson_data = {
        "type": "FeatureCollection",
        "features": drawn_features
    }
    with open("drawn_features.geojson", "w") as f:
        json.dump(geojson_data, f)
    print("Features saved to drawn_features.geojson!")

# download_button.on_click(download_geojson)
download_button.on_click(lambda _: display(FileLink(download_geojson)))

# Display Map and Button
VBox([download_button, m])


# m
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[2], line 24[0m
[1;32m     21[0m m[38;5;241m.[39madd(ll[38;5;241m.[39mMeasureControl(position[38;5;241m=[39m[38;5;124m'[39m[38;5;124mbottomleft[39m[38;5;124m'[39m, active_color[38;5;241m=[39m[38;5;124m'[39m[38;5;124morange[39m[38;5;124m'[39m, primary_length_unit[38;5;241m=[39m[38;5;124m'[39m[38;5;124mkilometers[39m[38;5;124m'[39m))
[1;32m     22[0m [38;5;66;03m#> Split map, with a slider[39;00m
[1;32m     23[0m [38;5;66;03m#> Draw, GeomanDrawControl[39;00m
[0;32m---> 24[0m draw_control [38;5;241m=[39m [43mll[49m[38;5;241;43m.[39;49m[43mGeomDrawControl[49m()
[1;32m     25[0m [38;5;66;03m#> Legend[39;00m
[1;32m     26[0m [38;5;66;03m#> Search[39;00m
[1;32m     27[0m 
[1;32m     28[0m 
[1;32m     29[0m 
[1;32m     30[0m [38;5;66;03m# Store drawn data[39;00m
[1;32m     31[0m drawn_features [38;5;241m=[39m []

[0;31mAttributeError[0m: module 'ipyleaflet' has no attribute 'GeomDrawControl'

